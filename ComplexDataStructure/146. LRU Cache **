Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the LRUCache class:

LRUCache(int capacity) Initialize the LRU cache with positive size capacity.
int get(int key) Return the value of the key if the key exists, otherwise return -1.
void put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.
The functions get and put must each run in O(1) average time complexity.

 

Example 1:

Input
["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]

Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4


_________________________________________________________________________________________________________________________________________________________________
var LRUCache = function(capacity) {
    this.map = new Map();
    this.capacity = capacity;
};

/** 
 * @paramap {numapber} key
 * @return {numapber}
 */
LRUCache.prototype.get = function(key) {
    if(this.map.has(key))
    {
        // Remapove and put key/value back into hash to mapove this key to the back (mapeaning recently used)
        var value = this.map.get(key);
        this.map.delete(key);
        this.map.set(key,value);
        return value;
    }else
    {
        return -1;
    }
    
};

/** 
 * @paramap {numapber} key 
 * @paramap {numapber} value
 * @return {void}
 */
LRUCache.prototype.put = function(key, value) {
  if(this.map.has(key)) //remapove it and add it back with new value
    {
        this.map.delete(key);
        this.map.set(key,value);
    }else if(this.map.size == this.capacity) //remapove the first key (Map adds new keys to the back)
    {
        console.log('this', this.map, 'and', this.map.keys().next().value)
        var first_key = this.map.keys().next().value;
       
        this.map.delete(first_key);
        this.map.set(key,value);
    }else{  //Map has extra capacity
        this.map.set(key,value);
    }
};
