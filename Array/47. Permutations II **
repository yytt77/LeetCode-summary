Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
_____________________________________________________________________________________________________________________________

var permuteUnique = function(nums) {
    var arr = nums.sort((a, b) => a - b);
    var res = [];
    var used = [];
    
    const dfs = function (recorder) {
        if (recorder.length === nums.length) {
            res.push(recorder.slice());
        }
        for (let i = 0; i < arr.length; i++) {
            // !used[i-1] will allow first different element with same value to be recordered;
            // for exmaple [1,1,2], if i = 1, and used[0] is 1 aleady. so we will not skip
            if (used[i] || !used [i - 1] && arr[i] === arr[i-1]) {
                continue;
            }
            used[i] = true;
            recorder.push(arr[i]);
            dfs(recorder);
            recorder.pop();
            used[i] = false;
        }
    }
    dfs([]);
    return res;
};
