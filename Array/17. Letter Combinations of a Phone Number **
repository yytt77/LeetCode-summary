Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]
________________________________________________________________________________________________________________________________________________________

var letterCombinations = function(digits) {
    if (digits.length === 0) {
        return []
    }
    let digitMap = {
        '2': 'abc',
        '3': 'def',
        '4': 'ghi',
        '5': 'jkl',
        '6': 'mno',
        '7': 'pqrs',
        '8': 'tuv',
        '9': 'wxyz',
    }

    let res = [];

    let dfs =  function(i, recorder) {
        if (recorder.length === digits.length) {
            res.push(recorder.join(''));
            return;
        }
        let chars = digitMap[digits[i]];
        for (let j = 0; j < chars.length; j++ ) {
            recorder.push(chars[j]);
            dfs(i + 1, recorder);
            recorder.pop()
        }
    }
    dfs(0, []);
    return res;
    
};
