Given two integers n and k, return all possible combinations of k numbers out of the range [1, n].
You may return the answer in any order.

Example 1:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Example 2:
Input: n = 1, k = 1
Output: [[1]]
________________________________________________________________________________________________________

var combine = function(n, k) {
    var res = [];
    var used = [];
    
    const dfs = function(i, recorder) {
        if (recorder.length === k) {   
            res.push(recorder.slice());
        }
        for (let j = i; j <= n; j++) {
            if (used[j]) continue;
            used[j] = true;
            recorder.push(j);
            dfs(j+ 1, recorder);
            recorder.pop();
            used[j] = false;
        }
    }
    dfs(1, [])
    return res;
};
______________________________________________________________________________________________________________

This is a second way
var combine = function(n, k) {
    let nums = [];
    for (let i = 1; i <= n; i++) {
        nums.push(i);
    }
    let res = [];
    let used = [];
    let dfs = function(j, recorder) {
        if (recorder.length === k) {
            return res.push(recorder.slice())
        }
        for (let i = j; i < nums.length; i++) {
            if (used[i]) {
                continue;
            } 
            used[i] = true;
            recorder.push(nums[i]);
            dfs(i, recorder);
            recorder.pop()
            used[i] = false;
        }
    }
    dfs(0, [])
    return res;
};



