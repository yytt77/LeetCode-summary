Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.
Each number in candidates may only be used once in the combination.
Note: The solution set must not contain duplicate combinations.

Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
______________________________________________________________________________________________________________________________________________________________________


var combinationSum2 = function(candidates, target) {
    var res = [];
    candidates.sort((a, b) => a - b);
    
    const dfs = function(i, target, slate) {
        if (target < 0) {
            return;
        }
        if (target === 0) {
            res.push(slate.slice());
        }
        for (let j = i; j < candidates.length; j ++) {
            //get rid of dupilicate, there are two 1s, so we get ride of second one
            if (i !== j && candidates[j] === candidates[j - 1]) continue;
            slate.push(candidates[j]);
            // one number can only use for once
            dfs(j + 1, target - candidates[j], slate);
            slate.pop();
        }
    }
    dfs(0, target, []);
    return res;
};
