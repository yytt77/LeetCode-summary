You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
Explanation: The arrays we are merging are [1] and [].
The result of the merge is [1].
Example 3:

Input: nums1 = [0], m = 0, nums2 = [1], n = 1
Output: [1]
Explanation: The arrays we are merging are [] and [1].
The result of the merge is [1].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

______________________________________________________________________________________________________________________________________________________________________________

//This question wanna check array for nums1, so we need to add both nums1 and nums2 to nums1.

var merge = function(nums1, m, nums2, n) {
    // we set len = total length of nums1 and nums2.
    let len = m + n;
    // because index start with 0, we need to -1 to get last element of nums1 array or nums2 array.
    m --;
    n --;
    while(n >= 0) {
        len --;
        // we compare last element of two arrays and add larger one to nums1
        if (nums1[m] > nums2[n]) {
            // when we add to nums1, size of m should decrease 1;
            nums1[len] = nums1[m--]
        } else {
          // when we add to nums1, size of n should decrease 1;
            nums1[len] = nums2[n--]
        }
    }
};
