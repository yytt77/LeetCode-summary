You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position.
Return the max sliding window.

Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
 
Example 2:
Input: nums = [1], k = 1
Output: [1]
_______________________________________________________________________________________________________________________________________________________

 var maxSlidingWindow = function(nums, k) {
    const stack = [];
    let res =[];
    for (var i = 0; i < nums.length; i++) {
        while (stack && nums[stack[stack.length - 1]] < nums[i]) {
            stack.pop();
        }
        stack.push(i);
        
        //when first index in stack is out of range, shift it
        if (stack[0] === i - k) {
            stack.shift();
        }
        // start to add max value to res;
        //max value always is first value;
        if (i - k >= -1) {
            res.push(nums[stack[0]])
        }
    }
    return res;
};
