Given an array of integers nums and an integer threshold, we will choose a positive integer divisor, divide all the array by it, and sum the division's result. Find the smallest divisor such that the result mentioned above is less than or equal to threshold.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5).

The test cases are generated so that there will be an answer.

Example 1:

Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
Example 2:

Input: nums = [44,22,33,11,1], threshold = 5
Output: 44

______________________________________________________________________________________________________________________________________________________________________________
// this question is very similar to Koko eat banana. Find the devisor that sum can be small than or equal to threshold
// exmaple 1: sum is 5 < 6;
//exmaple when devisor is 44. sum = 44 /44 + 22 /44 + 33 /44 + 11/44 + 1/44 = 5 = threshold

var smallestDivisor = function(nums, threshold) {
    
    var thresholdCompare = function(divisor) {
        var sum = 0;
        for ( let item of nums) {
            sum += Math.ceil(item / divisor);
        }
        return sum <= threshold;   
    }
    
    let low = 0;
    let high = Math.max(...nums);
    console.log('what we have', high)
    while (low < high) {
        let mid = Math.floor((low + high) /2);
        if (! thresholdCompare(mid)) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }
    return high
};
