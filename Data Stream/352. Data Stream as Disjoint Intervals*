Given a data stream input of non-negative integers a1, a2, ..., an, summarize the numbers seen so far as a list of disjoint intervals.

Implement the SummaryRanges class:

SummaryRanges() Initializes the object with an empty stream.
void addNum(int val) Adds the integer val to the stream.
int[][] getIntervals() Returns a summary of the integers in the stream currently as a list of disjoint intervals [starti, endi].
 
Example 1:

Input
["SummaryRanges", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals", "addNum", "getIntervals"]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]

Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

_____________________________________________________________________________________________________________________________________________________________
// set index to true, so when you add number 1 and 3 it will be [null, true, null, true]
// after that just interate through the array and found continueous 'true' in the array

var SummaryRanges = function() {
    this.arr = [];
};

SummaryRanges.prototype.addNum = function(val) {
    this.arr[val] = true
};

SummaryRanges.prototype.getIntervals = function() {
    let res = [];
    let temp = -1;
    for (var i = 0; i < this.arr.length; i++) { 
        if (temp === -1) {
            if (this.arr[i]) {
                temp = i;
            } 
        }else {
            if (!this.arr[i]) {
                res.push([temp, i - 1]);
                temp = -1;
            }
        } 
    }
    if (temp !== -1) {
        res.push([temp, this.arr.length -1]);
    }
    return res;
};
