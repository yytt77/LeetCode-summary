There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.

Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.
_______________________________________________________________________________________________________________________________________________________________
// buildadjList, output will be [[1],[[]] for ([1,0]) and [[1],[0]] for [[1,0],[0,1]]
const buildadjList = (n, edges) => {
    const adjList = Array.from({length:n}, ()=> []);
    for (edge of edges) {
        let [src, des] = edge;
        adjList[src].push(des);
    }
    return adjList;
}

// check if there is a cycle in graph
const hasCycle  = function(node, adjList, visited, start, end) {
    visited[node] = true;
    start[node] ++;
    for (let neighbor of adjList[node]) {
        if (!visited[neighbor]) {
            // only meet request if else is true;
            if (hasCycle(neighbor, adjList, visited, start, end)) {
                return true;
            }
        } else {
            // go to same vextex twice and not exit, we can say there is a cycle
            if (end[neighbor] === 0) {
                return true;
            }
        }
    }
    end[node] ++;
    return false;
}
var canFinish = function(numCourses, prerequisites) {
    const adjList = buildadjList(numCourses, prerequisites);
    console.log(adjList);
    let visited = {};
    let start = Array.from({length: numCourses}, () => 0);
    let end = Array.from({length: numCourses}, () => 0); 
    
    for (var vertex = 0; vertex < numCourses; vertex ++) {
        if (!visited[vertex]) {
            if (hasCycle(vertex, adjList, visited, start, end)) {
                return false;
            }
        }
    }
    return true;
};
