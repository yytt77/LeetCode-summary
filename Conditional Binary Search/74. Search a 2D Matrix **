Write an efficient algorithm that searches for a value target in an m x n integer matrix matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.

Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false


______________________________________________________________________________________________________________________________________________________________________________
// Bascially we use two binary search to find matrix first and then find target inside of that array.

var searchMatrix = function(matrix, target) {
    let low = 0; 
    let high = matrix.length - 1;
    while (low <= high) {
        let mid = Math.floor((low + high) / 2);
        console.log('what we have', matrix[mid][matrix[mid].length - 1], target);
        if (matrix[mid][matrix[mid].length - 1] < target) {
            low = mid + 1;
        } 
        else if (matrix[mid][0] > target ) {
            high = mid -1;
        } else {
            let left = 0;
            let right = matrix[mid].length -1;
            while (left <= right) {
                let matrixMid = Math.floor((left + right) / 2);
                if (matrix[mid][matrixMid] === target) {
                    return true;
                } else if(matrix[mid][matrixMid] > target) {
                    right = matrixMid - 1;
                 } else {
                     left = matrixMid + 1;
                 }
            }
          // if we don't find the number, we want to break to exit the loop  
          break;
        }
    }
    return false;
};
