Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
___________________________________________________________________________________________________________________________________________________________________________

var findMedianSortedArrays = function(nums1, nums2) {
    // https://www.google.com/search?q=4.+Median+of+Two+Sorted+Arrays+video+%E7%8C%AB%E6%89%93%E7%90%83&biw=1745&bih=917&tbm=vid&sxsrf=APwXEddpPZC0aWO2FnuguO-vxdem2Clwgg%3A1686274777284&ei=2YKCZK3yELvtptQPwcyBiA0&ved=0ahUKEwjtwt-Ih7X_AhW7tokEHUFmANE4WhDh1QMIDQ&uact=5&oq=4.+Median+of+Two+Sorted+Arrays+video+%E7%8C%AB%E6%89%93%E7%90%83&gs_lcp=Cg1nd3Mtd2l6LXZpZGVvEAMyBQgAEKIEMgUIABCiBDIFCAAQogQyBQgAEKIEOgQIIxAnOgUIIRCgAToFCCEQqwI6CAghEBYQHhAdUN8FWJUjYK4qaABwAHgAgAF8iAHWCJIBAzcuNZgBAKABAcABAQ&sclient=gws-wiz-video#fpstate=ive&vld=cid:9d73cd22,vid:ScCg9v921ns
  if (nums1.length > nums2.length) {
    [nums1, nums2] = [nums2, nums1]; // Swap arrays if nums1 is longer
  }

  const m = nums1.length;
  const n = nums2.length;
  let low = 0;
  let high = m;

  while (low <= high) {
    const mid1 = Math.floor((low + high) / 2);
    const mid2 = Math.floor((m + n + 1) / 2) - mid1;
    
    const L1 = mid1 > 0 ? nums1[mid1 - 1] : -Infinity;
    const R1 = mid1 < m ? nums1[mid1] : Infinity;

    const L2 = mid2 > 0 ? nums2[mid2 - 1] : -Infinity;
    const R2 = mid2 < n ? nums2[mid2] : Infinity;

console.log('result four, L1', L1, 'R1', R1, 'L2', L2, 'R2', R2)
    if (L1 <= R2 && L2 <= R1) {
      if ((m + n) % 2 === 0) {
        return (Math.max(L1, L2) + Math.min(R1, R2)) / 2;
      } else {
        return Math.max(L1, L2);
      }
    } else if (L1 > R2) {
      high = mid1 - 1;
    } else {
      low = mid1 + 1;
    }
  }
}
