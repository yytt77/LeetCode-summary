Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.
The overall run time complexity should be O(log (m+n)).

Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.

Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
___________________________________________________________________________________________________________________________________________________________________________

var findMedianSortedArrays = function(nums1, nums2) {
    const x = nums1.length; 
    const y = nums2.length;
    let count = 0;
    let total = 0;
    let odd = false;
    let devider = 2;
    let medianIndex  = Math.ceil((x + y) / 2);
    if ( (x + y) % 2 === 1)  {
      odd = true;
      devider = 1;
    }  
    while (nums1.length || nums2.length) {
        let res;
        if (nums1[0] < nums2[0] && (nums1.length !== 0) || (nums2.length === 0)) {
          res = nums1.shift();
          count ++;
        } else {
          res = nums2.shift();
          count ++;
        }
        
        if (count === medianIndex && odd) {
          total += res;
          console.log('this is ', total)
        }
        
        if((count === medianIndex || count === medianIndex + 1) && !odd) {
          total += res;
                    console.log('this iss ', res)
        }
      }
      return total / devider;
}
