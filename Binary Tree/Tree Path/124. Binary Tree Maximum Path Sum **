A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.

Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.

___________________________________________________________________________________________________________________________________________________________

var maxPathSum = function(root) {
    let res = - Infinity;
    
    const dfs = function (node) {
        if (!node) {
            return 0;
        }
        var left = Math.max(0, dfs(node.left));
        var right = Math.max(0, dfs(node.right));
        res = Math.max(res, left + node.val + right);
        // return to last node and add one way path to that node. Only able to choose one path, so we pick left or right
        return Math.max(left, right) + node.val;
    }
    dfs(root);
    return res;
};
