Given the root of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

_________________________________________________________________________________________________________________________________
// BFS and unshift;
var levelOrderBottom = function(root) {
    if (!root) {
        return []
    }
    let queue = [root];
    let res = [];
    while(queue.length) {
        let temp = [];
        let len = queue.length;
        for (let  i = 0 ; i < len; i++) {
            let node = queue.shift();
            if (node === null) {
                continue;
            } 
            temp.push(node.val);
            if (node.left) {
                queue.push(node.left);                
            }
            if (node.right) {
                queue.push(node.right);    
            }
            
        }
        res.unshift(temp);
    }
    return res;
    
};
