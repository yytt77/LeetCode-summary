Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
___________________________________________________________________________________________________________________________________________________________________________
Example 1:

Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

BFS: 
var serialize = function (root) {
  // covert binary tree to array
    if (!root) return [];
    var data = [];
    var queue = [root];
    
    while (queue.length) {
        var node = queue.shift();
        
        if (node === null) {
            data.push(null);
            continue;
        }
        data.push(node.val);
//        if(node.left) {
//            queue.push(node.left)
//        } else {
//            queue.push(null)
//        }
           
//        if(node.right) {
//            queue.push(node.right);
//        } else {
//            queue.push(null)
//        }
        queue.push(node.left);
        queue.push(node.right);
    }
    return data
};

var deserialize = function(data) {
  // covert array to binary tree
  if (data.length === 0) {
    return null;
  }
  let index = 0;
  let root = new TreeNode(data[0]);
  let queue = [root];
  while (queue.length > 0) {
    let node = queue.shift();
    let leftI = index + 1;
    let rightI = index + 2;
    if (data[leftI] !== null) {
      node.left = new TreeNode(data[leftI]);
      queue.push(node.left);
    }
    if (data[rightI] !== null) {
      node.right = new TreeNode(data[rightI]);
      queue.push(node.right);
    }
    index += 2;
  }
  return root;
};
_________________________________________________________
DFS: pre-order
var serialize = function(root) {
    let result = [];
    dfs(root);
    
    function dfs(root){
        if (!root) {
            result.push('#');
        } else {
            result.push(root.val);
            dfs(root.left);
            dfs(root.right);
        }
    }
    return result.join(' ');
}

var deserialize = function(data) {
  if (data.length === 0) {
    return null;
  }
    function buildTree() {
        let val = data.shift();

        if (val === null) {
            return null;
        } else {
            let node = new TreeNode(Number(val));
            node.left = buildTree();
            node.right = buildTree();
            return node;
        }
    }
    return buildTree();
};
