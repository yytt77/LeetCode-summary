Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

_____________________________________________________________________________________________________________________________________________________

// reverse temp solution and save into result;
var zigzagLevelOrder = function(root) {
    if (!root) return [];
    let queue = [root];
    let res = [];
    let level = 1;
    while (queue.length) {

      let temp = [];
      let len = queue.length;
        for (let i = 0; i < len; i++) {
            let node = queue.shift();
            if (node === null ) {
                continue;
            } else {
            temp.push(node.val);
                if (node.left) {
            queue.push(node.left);                    
                }
            if (node.right) {
                queue.push(node.right);    
            }
                        
            }
        }
        if (level % 2 === 1) {
            res.push(temp);
        } else {
            res.push(temp.reverse())
        }
        level ++;
       
    }
    return res;
};
