Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

Example 2:
Input: root = []
Output: []

_____________________________________________________________________________________________________________________________
var serialize = function(root) {
    if (!root) return [];
    let res = [];
    let queue = [root];
    while (queue.length > 0) {
        let node = queue.shift();
        if (node === null) {
            res.push(null);
            continue;
        }
        res.push(node.val);
        queue.push(node.left);
        queue.push(node.right);
    }
    return res;
};

/**
 * Decodes your encoded data to tree.
 *
 * @param {string} data
 * @return {TreeNode}
 */
var deserialize = function(data) {
    if (data.length === 0) {
        return null;
    }
    let index = 0;
    let root = new TreeNode(data[0]);
    let queue = [root];
    while(queue.length > 0) {
        let node = queue.shift();
        let left = index + 1;
        let right = index + 2;
        if (data[left] !== null) {
            node.left = new TreeNode(data[left]);
            queue.push(node.left);
        }
        if (data[right] !== null) {
            node.right = new TreeNode(data[right]);
            queue.push(node.right);
        }
        index += 2;
    }
    return root;
};
