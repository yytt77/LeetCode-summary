

Given an array nums of n integers, return an array of all the unique quadruplets [nums[a], nums[b], nums[c], nums[d]] such that:

0 <= a, b, c, d < n
a, b, c, and d are distinct.
nums[a] + nums[b] + nums[c] + nums[d] == target
You may return the answer in any order.

Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [2,2,2,2,2], target = 8
Output: [[2,2,2,2]]
__________________________________________________________________________________________________________________________________________________________________
var fourSum = function(nums, target) {
    nums.sort((a,b) => {return a-b});
    let res = [];
    for (var i = 0; i < nums.length - 3; i++) {
        if (i > 0 && nums[i] === nums[i -1]) {
            continue;
        }
        for(let j = i + 1; j < nums.length - 2; j++) {
            if (j > i + 1 && nums[j] === nums[j -1]) {
                continue;
            }
            let l = j + 1;
            let r = nums.length - 1

            while(l < r) {
                const sum = nums[i] + nums[j] + nums[l] + nums[r];
                if(sum === target) {
                    res.push([nums[i], nums[j], nums[l], nums[r]])
                    while(nums[l] === nums[l + 1]) l++;
                    while(nums[r] === nums[r - 1]) r--;
                    l++;
                    r--;
                } else if(sum < target) {
                    l++
                } else {
                    r--
                }
            }   
            while(nums[j] === nums[j + 1]) j++;
        }
        while(nums[i] === nums[i + 1]) i++;
    }
    return res;
};
